<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Mero's Blog</title><link>https://blog.merovius.de/tags/golang/</link><description>Recent content in golang on Mero's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.merovius.de/tags/golang/rss.xml" rel="self" type="application/rss+xml"/><item><title>Parametric context</title><link>https://blog.merovius.de/posts/2020-07-20-parametric-context/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.merovius.de//2020/07/20/parametric-context.html</guid><description>Go&amp;rsquo;s Context.Value is controversial because of a lack of type-safety. I design a solution for that based on the new generics design draft.</description></item><item><title>A bird's eye view of Go</title><link>https://blog.merovius.de/posts/2019-06-12-birdseye-go/</link><pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate><guid>https://blog.merovius.de//2019/06/12/birdseye-go.html</guid><description>I provide a very high-level overview of what Go-the-language means vs. Go-the-ecosystem vs. Go-an-implementation. I also try to provide specific references to what documentation is most useful for what purpose.</description></item><item><title>Using roughtime as a "cryptographic notary"</title><link>https://blog.merovius.de/posts/2018-10-10-using-roughtime-as-a-cryptographic-notary/</link><pubDate>Wed, 10 Oct 2018 23:22:40 +0000</pubDate><guid>https://blog.merovius.de//2018/10/18/using-roughtime-as-a-cryptographic-notary.html</guid><description>Roughtime can be (ab)used for Trusted Timestamping. I wrote a simple tool as a PoC</description></item><item><title>Scrapping contracts</title><link>https://blog.merovius.de/posts/2018-09-05-scrapping_contracts/</link><pubDate>Wed, 05 Sep 2018 04:00:00 +0000</pubDate><guid>https://blog.merovius.de//2018/09/05/scrapping_contracts.html</guid><description>I describe a way to simplify the generics design. The ideas are not particularly novel and have been expressed to various degrees by other people as well. I hope to provide a more complete view of the design though.</description></item><item><title>Why doesn't Go have variance in its type system?</title><link>https://blog.merovius.de/posts/2018-06-03-why-doesnt-go-have-variance-in/</link><pubDate>Sun, 03 Jun 2018 23:20:00 +0000</pubDate><guid>https://blog.merovius.de//2018/06/03/why-doesnt-go-have-variance-in.html</guid><description>I explain what co-, contra- and invariance are and what the implications for Go&amp;rsquo;s type system would be. In particular, why it&amp;rsquo;s impossible to have variance in slices.</description></item><item><title>Persistent datastructures with Go</title><link>https://blog.merovius.de/posts/2018-02-25-persistent_datastructures_with_go/</link><pubDate>Sun, 25 Feb 2018 17:30:00 +0000</pubDate><guid>https://blog.merovius.de//2018/02/25/persistent_datastructures_with_go.html</guid><description>I present a couple of patterns that help modelling persistent datastructures in Go. I also apply them to three examples.</description></item><item><title>What even is error handling?</title><link>https://blog.merovius.de/posts/2018-01-21-what_even_is_error_handling/</link><pubDate>Sun, 21 Jan 2018 23:40:00 +0000</pubDate><guid>https://blog.merovius.de//2018/01/21/what_even_is_error_handling.html</guid><description>I philosophize about error handling, what it actually means and how to characterize Go&amp;rsquo;s approach to it.</description></item><item><title>Generating entropy without imports in Go</title><link>https://blog.merovius.de/posts/2018-01-15-generating_entropy_without_imports_in_go/</link><pubDate>Mon, 15 Jan 2018 01:04:30 +0000</pubDate><guid>https://blog.merovius.de//2018/01/15/generating_entropy_without_imports_in_go.html</guid><description>I come up with a couple of useless, but entertaining ways to generate entropy without relying on any packages.</description></item><item><title>Diminishing returns of static typing</title><link>https://blog.merovius.de/posts/2017-09-12-diminishing-returns-of-static-typing/</link><pubDate>Tue, 12 Sep 2017 11:05:00 +0000</pubDate><guid>https://blog.merovius.de//2017/09/12/diminishing-returns-of-static-typing.html</guid><description>When talking about static type systems, we often tend to focus on one side of the equation. I&amp;rsquo;m trying to make explicit how I view the question as a tradeoff and why I neither agree with “more is always better”, nor with “a little is enough”.</description></item><item><title>Why context.Value matters and how to improve it</title><link>https://blog.merovius.de/posts/2017-08-14-why-context-value-matters-and-how-to-improve-it/</link><pubDate>Mon, 14 Aug 2017 00:17:25 +0000</pubDate><guid>https://blog.merovius.de//2017/08/14/why-context-value-matters-and-how-to-improve-it.html</guid><description>In light of recent discussions about its removal, I try to discuss what kinds of problems context.Value tries to solve. I then try to describe a design which would address most (but not all) of the criticism surrounding it.</description></item></channel></rss>